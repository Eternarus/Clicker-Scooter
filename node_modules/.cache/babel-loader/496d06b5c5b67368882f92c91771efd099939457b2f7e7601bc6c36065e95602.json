{"ast":null,"code":"const cp = require('child_process');\nconst fs = require('fs-extra');\nconst path = require('path');\nconst util = require('util');\n\n/**\n * @function Object() { [native code] }\n * @param {number} code Error code.\n * @param {string} message Error message.\n */\nfunction ProcessError(code, message) {\n  const callee = arguments.callee;\n  Error.apply(this, [message]);\n  Error.captureStackTrace(this, callee);\n  this.code = code;\n  this.message = message;\n  this.name = callee.name;\n}\nutil.inherits(ProcessError, Error);\n\n/**\n * Util function for handling spawned processes as promises.\n * @param {string} exe Executable.\n * @param {Array<string>} args Arguments.\n * @param {string} cwd Working directory.\n * @return {Promise} A promise.\n */\nfunction spawn(exe, args, cwd) {\n  return new Promise((resolve, reject) => {\n    const child = cp.spawn(exe, args, {\n      cwd: cwd || process.cwd()\n    });\n    const buffer = [];\n    child.stderr.on('data', chunk => {\n      buffer.push(chunk.toString());\n    });\n    child.stdout.on('data', chunk => {\n      buffer.push(chunk.toString());\n    });\n    child.on('close', code => {\n      const output = buffer.join('');\n      if (code) {\n        const msg = output || 'Process failed: ' + code;\n        reject(new ProcessError(code, msg));\n      } else {\n        resolve(output);\n      }\n    });\n  });\n}\n\n/**\n * Create an object for executing git commands.\n * @param {string} cwd Repository directory.\n * @param {string} cmd Git executable (full path if not already on path).\n * @function Object() { [native code] }\n */\nfunction Git(cwd, cmd) {\n  this.cwd = cwd;\n  this.cmd = cmd || 'git';\n  this.output = '';\n}\n\n/**\n * Execute an arbitrary git command.\n * @param {Array<string>} args Arguments (e.g. ['remote', 'update']).\n * @return {Promise} A promise.  The promise will be resolved with this instance\n *     or rejected with an error.\n */\nGit.prototype.exec = function (...args) {\n  return spawn(this.cmd, [...args], this.cwd).then(output => {\n    this.output = output;\n    return this;\n  });\n};\n\n/**\n * Initialize repository.\n * @return {Promise} A promise.\n */\nGit.prototype.init = function () {\n  return this.exec('init');\n};\n\n/**\n * Clean up unversioned files.\n * @return {Promise} A promise.\n */\nGit.prototype.clean = function () {\n  return this.exec('clean', '-f', '-d');\n};\n\n/**\n * Hard reset to remote/branch\n * @param {string} remote Remote alias.\n * @param {string} branch Branch name.\n * @return {Promise} A promise.\n */\nGit.prototype.reset = function (remote, branch) {\n  return this.exec('reset', '--hard', remote + '/' + branch);\n};\n\n/**\n * Fetch from a remote.\n * @param {string} remote Remote alias.\n * @return {Promise} A promise.\n */\nGit.prototype.fetch = function (remote) {\n  return this.exec('fetch', remote);\n};\n\n/**\n * Checkout a branch (create an orphan if it doesn't exist on the remote).\n * @param {string} remote Remote alias.\n * @param {string} branch Branch name.\n * @return {Promise} A promise.\n */\nGit.prototype.checkout = function (remote, branch) {\n  const treeish = remote + '/' + branch;\n  return this.exec('ls-remote', '--exit-code', '.', treeish).then(() => {\n    // branch exists on remote, hard reset\n    return this.exec('checkout', branch).then(() => this.clean()).then(() => this.reset(remote, branch));\n  }, error => {\n    if (error instanceof ProcessError && error.code === 2) {\n      // branch doesn't exist, create an orphan\n      return this.exec('checkout', '--orphan', branch);\n    } else {\n      // unhandled error\n      throw error;\n    }\n  });\n};\n\n/**\n * Remove all unversioned files.\n * @param {string | Array<string>} files Files argument.\n * @return {Promise} A promise.\n */\nGit.prototype.rm = function (files) {\n  if (!Array.isArray(files)) {\n    files = [files];\n  }\n  return this.exec('rm', '--ignore-unmatch', '-r', '-f', ...files);\n};\n\n/**\n * Add files.\n * @param {string | Array<string>} files Files argument.\n * @return {Promise} A promise.\n */\nGit.prototype.add = function (files) {\n  if (!Array.isArray(files)) {\n    files = [files];\n  }\n  return this.exec('add', ...files);\n};\n\n/**\n * Commit (if there are any changes).\n * @param {string} message Commit message.\n * @return {Promise} A promise.\n */\nGit.prototype.commit = function (message) {\n  return this.exec('diff-index', '--quiet', 'HEAD').catch(() => this.exec('commit', '-m', message));\n};\n\n/**\n * Add tag\n * @param {string} name Name of tag.\n * @return {Promise} A promise.\n */\nGit.prototype.tag = function (name) {\n  return this.exec('tag', name);\n};\n\n/**\n * Push a branch.\n * @param {string} remote Remote alias.\n * @param {string} branch Branch name.\n * @param {boolean} force Force push.\n * @return {Promise} A promise.\n */\nGit.prototype.push = function (remote, branch, force) {\n  const args = ['push', '--tags', remote, branch];\n  if (force) {\n    args.push('--force');\n  }\n  return this.exec.apply(this, args);\n};\n\n/**\n * Get the URL for a remote.\n * @param {string} remote Remote alias.\n * @return {Promise<string>} A promise for the remote URL.\n */\nGit.prototype.getRemoteUrl = function (remote) {\n  return this.exec('config', '--get', 'remote.' + remote + '.url').then(git => {\n    const repo = git.output && git.output.split(/[\\n\\r]/).shift();\n    if (repo) {\n      return repo;\n    } else {\n      throw new Error('Failed to get repo URL from options or current directory.');\n    }\n  }).catch(err => {\n    throw new Error('Failed to get remote.' + remote + '.url (task must either be ' + 'run in a git repository with a configured ' + remote + ' remote ' + 'or must be configured with the \"repo\" option).');\n  });\n};\n\n/**\n * Delete ref to remove branch history\n * @param {string} branch The branch name.\n * @return {Promise} A promise.  The promise will be resolved with this instance\n *     or rejected with an error.\n */\nGit.prototype.deleteRef = function (branch) {\n  return this.exec('update-ref', '-d', 'refs/heads/' + branch);\n};\n\n/**\n * Clone a repo into the given dir if it doesn't already exist.\n * @param {string} repo Repository URL.\n * @param {string} dir Target directory.\n * @param {string} branch Branch name.\n * @param {options} options All options.\n * @return {Promise<Git>} A promise.\n */\nGit.clone = function clone(repo, dir, branch, options) {\n  return fs.exists(dir).then(exists => {\n    if (exists) {\n      return Promise.resolve(new Git(dir, options.git));\n    } else {\n      return fs.mkdirp(path.dirname(path.resolve(dir))).then(() => {\n        const args = ['clone', repo, dir, '--branch', branch, '--single-branch', '--origin', options.remote, '--depth', options.depth];\n        return spawn(options.git, args).catch(err => {\n          // try again without branch or depth options\n          return spawn(options.git, ['clone', repo, dir, '--origin', options.remote]);\n        }).then(() => new Git(dir, options.git));\n      });\n    }\n  });\n};\nmodule.exports = Git;","map":{"version":3,"names":["cp","require","fs","path","util","ProcessError","code","message","callee","arguments","Error","apply","captureStackTrace","name","inherits","spawn","exe","args","cwd","Promise","resolve","reject","child","process","buffer","stderr","on","chunk","push","toString","stdout","output","join","msg","Git","cmd","prototype","exec","then","init","clean","reset","remote","branch","fetch","checkout","treeish","error","rm","files","Array","isArray","add","commit","catch","tag","force","getRemoteUrl","git","repo","split","shift","err","deleteRef","clone","dir","options","exists","mkdirp","dirname","depth","module","exports"],"sources":["C:/Users/mrdrd/OneDrive/Рабочий стол/Project/clicker/node_modules/gh-pages/lib/git.js"],"sourcesContent":["const cp = require('child_process');\nconst fs = require('fs-extra');\nconst path = require('path');\nconst util = require('util');\n\n/**\n * @function Object() { [native code] }\n * @param {number} code Error code.\n * @param {string} message Error message.\n */\nfunction ProcessError(code, message) {\n  const callee = arguments.callee;\n  Error.apply(this, [message]);\n  Error.captureStackTrace(this, callee);\n  this.code = code;\n  this.message = message;\n  this.name = callee.name;\n}\nutil.inherits(ProcessError, Error);\n\n/**\n * Util function for handling spawned processes as promises.\n * @param {string} exe Executable.\n * @param {Array<string>} args Arguments.\n * @param {string} cwd Working directory.\n * @return {Promise} A promise.\n */\nfunction spawn(exe, args, cwd) {\n  return new Promise((resolve, reject) => {\n    const child = cp.spawn(exe, args, {cwd: cwd || process.cwd()});\n    const buffer = [];\n    child.stderr.on('data', (chunk) => {\n      buffer.push(chunk.toString());\n    });\n    child.stdout.on('data', (chunk) => {\n      buffer.push(chunk.toString());\n    });\n    child.on('close', (code) => {\n      const output = buffer.join('');\n      if (code) {\n        const msg = output || 'Process failed: ' + code;\n        reject(new ProcessError(code, msg));\n      } else {\n        resolve(output);\n      }\n    });\n  });\n}\n\n/**\n * Create an object for executing git commands.\n * @param {string} cwd Repository directory.\n * @param {string} cmd Git executable (full path if not already on path).\n * @function Object() { [native code] }\n */\nfunction Git(cwd, cmd) {\n  this.cwd = cwd;\n  this.cmd = cmd || 'git';\n  this.output = '';\n}\n\n/**\n * Execute an arbitrary git command.\n * @param {Array<string>} args Arguments (e.g. ['remote', 'update']).\n * @return {Promise} A promise.  The promise will be resolved with this instance\n *     or rejected with an error.\n */\nGit.prototype.exec = function (...args) {\n  return spawn(this.cmd, [...args], this.cwd).then((output) => {\n    this.output = output;\n    return this;\n  });\n};\n\n/**\n * Initialize repository.\n * @return {Promise} A promise.\n */\nGit.prototype.init = function () {\n  return this.exec('init');\n};\n\n/**\n * Clean up unversioned files.\n * @return {Promise} A promise.\n */\nGit.prototype.clean = function () {\n  return this.exec('clean', '-f', '-d');\n};\n\n/**\n * Hard reset to remote/branch\n * @param {string} remote Remote alias.\n * @param {string} branch Branch name.\n * @return {Promise} A promise.\n */\nGit.prototype.reset = function (remote, branch) {\n  return this.exec('reset', '--hard', remote + '/' + branch);\n};\n\n/**\n * Fetch from a remote.\n * @param {string} remote Remote alias.\n * @return {Promise} A promise.\n */\nGit.prototype.fetch = function (remote) {\n  return this.exec('fetch', remote);\n};\n\n/**\n * Checkout a branch (create an orphan if it doesn't exist on the remote).\n * @param {string} remote Remote alias.\n * @param {string} branch Branch name.\n * @return {Promise} A promise.\n */\nGit.prototype.checkout = function (remote, branch) {\n  const treeish = remote + '/' + branch;\n  return this.exec('ls-remote', '--exit-code', '.', treeish).then(\n    () => {\n      // branch exists on remote, hard reset\n      return this.exec('checkout', branch)\n        .then(() => this.clean())\n        .then(() => this.reset(remote, branch));\n    },\n    (error) => {\n      if (error instanceof ProcessError && error.code === 2) {\n        // branch doesn't exist, create an orphan\n        return this.exec('checkout', '--orphan', branch);\n      } else {\n        // unhandled error\n        throw error;\n      }\n    }\n  );\n};\n\n/**\n * Remove all unversioned files.\n * @param {string | Array<string>} files Files argument.\n * @return {Promise} A promise.\n */\nGit.prototype.rm = function (files) {\n  if (!Array.isArray(files)) {\n    files = [files];\n  }\n  return this.exec('rm', '--ignore-unmatch', '-r', '-f', ...files);\n};\n\n/**\n * Add files.\n * @param {string | Array<string>} files Files argument.\n * @return {Promise} A promise.\n */\nGit.prototype.add = function (files) {\n  if (!Array.isArray(files)) {\n    files = [files];\n  }\n  return this.exec('add', ...files);\n};\n\n/**\n * Commit (if there are any changes).\n * @param {string} message Commit message.\n * @return {Promise} A promise.\n */\nGit.prototype.commit = function (message) {\n  return this.exec('diff-index', '--quiet', 'HEAD').catch(() =>\n    this.exec('commit', '-m', message)\n  );\n};\n\n/**\n * Add tag\n * @param {string} name Name of tag.\n * @return {Promise} A promise.\n */\nGit.prototype.tag = function (name) {\n  return this.exec('tag', name);\n};\n\n/**\n * Push a branch.\n * @param {string} remote Remote alias.\n * @param {string} branch Branch name.\n * @param {boolean} force Force push.\n * @return {Promise} A promise.\n */\nGit.prototype.push = function (remote, branch, force) {\n  const args = ['push', '--tags', remote, branch];\n  if (force) {\n    args.push('--force');\n  }\n  return this.exec.apply(this, args);\n};\n\n/**\n * Get the URL for a remote.\n * @param {string} remote Remote alias.\n * @return {Promise<string>} A promise for the remote URL.\n */\nGit.prototype.getRemoteUrl = function (remote) {\n  return this.exec('config', '--get', 'remote.' + remote + '.url')\n    .then((git) => {\n      const repo = git.output && git.output.split(/[\\n\\r]/).shift();\n      if (repo) {\n        return repo;\n      } else {\n        throw new Error(\n          'Failed to get repo URL from options or current directory.'\n        );\n      }\n    })\n    .catch((err) => {\n      throw new Error(\n        'Failed to get remote.' +\n          remote +\n          '.url (task must either be ' +\n          'run in a git repository with a configured ' +\n          remote +\n          ' remote ' +\n          'or must be configured with the \"repo\" option).'\n      );\n    });\n};\n\n/**\n * Delete ref to remove branch history\n * @param {string} branch The branch name.\n * @return {Promise} A promise.  The promise will be resolved with this instance\n *     or rejected with an error.\n */\nGit.prototype.deleteRef = function (branch) {\n  return this.exec('update-ref', '-d', 'refs/heads/' + branch);\n};\n\n/**\n * Clone a repo into the given dir if it doesn't already exist.\n * @param {string} repo Repository URL.\n * @param {string} dir Target directory.\n * @param {string} branch Branch name.\n * @param {options} options All options.\n * @return {Promise<Git>} A promise.\n */\nGit.clone = function clone(repo, dir, branch, options) {\n  return fs.exists(dir).then((exists) => {\n    if (exists) {\n      return Promise.resolve(new Git(dir, options.git));\n    } else {\n      return fs.mkdirp(path.dirname(path.resolve(dir))).then(() => {\n        const args = [\n          'clone',\n          repo,\n          dir,\n          '--branch',\n          branch,\n          '--single-branch',\n          '--origin',\n          options.remote,\n          '--depth',\n          options.depth,\n        ];\n        return spawn(options.git, args)\n          .catch((err) => {\n            // try again without branch or depth options\n            return spawn(options.git, [\n              'clone',\n              repo,\n              dir,\n              '--origin',\n              options.remote,\n            ]);\n          })\n          .then(() => new Git(dir, options.git));\n      });\n    }\n  });\n};\n\nmodule.exports = Git;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}